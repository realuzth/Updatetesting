-- Locker Room Protection v3.0 - Clean Version
-- Simple bat-based defense system
-- Created by uzth

print("=== LOCKER ROOM PROTECTION STARTING ===")

repeat task.wait() until game:IsLoaded()
print("Game loaded successfully!")

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

local LocalPlayer = Players.LocalPlayer
print("Local player: " .. LocalPlayer.Name)

-- Defense system
local Defense = {
    active = true,
    cooldowns = {},
    range = 25,
    bat = nil,
    batPart = nil
}

function Defense:findBat()
    print("Searching for baseball bat...")
    
    -- Search in player folder first
    local playerFolder = Workspace.Players:FindFirstChild(LocalPlayer.Name)
    if playerFolder then
        local bat = playerFolder:FindFirstChild("BaseballBat")
        if bat then
            print("‚úì Found bat tool: " .. bat:GetFullName())
            
            -- Find the actual Part inside the Tool
            local batPart = bat:FindFirstChild("Handle") or bat:FindFirstChildOfClass("Part")
            if batPart then
                print("‚úì Found bat part: " .. batPart:GetFullName())
                return bat, batPart
            else
                print("‚úó No Part found inside bat tool")
            end
        end
    end
    
    -- Search everywhere in workspace
    for _, obj in pairs(Workspace:GetDescendants()) do
        if obj.Name == "BaseballBat" and obj.Parent and obj.Parent.Name == LocalPlayer.Name then
            print("‚úì Found bat tool: " .. obj:GetFullName())
            
            local batPart = obj:FindFirstChild("Handle") or obj:FindFirstChildOfClass("Part")
            if batPart then
                print("‚úì Found bat part: " .. batPart:GetFullName())
                return obj, batPart
            end
        end
    end
    
    print("‚úó No baseball bat found")
    return nil, nil
end

function Defense:ragdollTarget(target)
    if not target or not target.Character then return end
    
    local char = target.Character
    local humanoid = char:FindFirstChild("Humanoid")
    local rootPart = char:FindFirstChild("HumanoidRootPart")
    
    if not humanoid or not rootPart then return end
    
    print("üî• RAGDOLLING: " .. target.Name)
    
    -- Method 1: Destroy all joints to force ragdoll
    spawn(function()
        for _, joint in pairs(char:GetDescendants()) do
            if joint:IsA("Motor6D") or joint:IsA("Weld") or joint:IsA("WeldConstraint") then
                pcall(function() joint:Destroy() end)
            end
        end
    end)
    
    -- Method 2: Force physics state
    spawn(function()
        pcall(function()
            humanoid.PlatformStand = true
            humanoid:ChangeState(Enum.HumanoidStateType.Physics)
            humanoid.Sit = true
            
            -- Apply force
            local bodyVel = Instance.new("BodyVelocity")
            bodyVel.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
            bodyVel.Velocity = Vector3.new(math.random(-50, 50), 30, math.random(-50, 50))
            bodyVel.Parent = rootPart
            
            game:GetService("Debris"):AddItem(bodyVel, 1)
        end)
    end)
    
    -- Method 3: Spam all RemoteEvents
    spawn(function()
        for _, event in pairs(ReplicatedStorage:GetDescendants()) do
            if event:IsA("RemoteEvent") then
                for i = 1, 3 do
                    pcall(function()
                        event:FireServer(target, LocalPlayer)
                        event:FireServer(char, LocalPlayer.Character)
                        event:FireServer(rootPart, self.batPart)
                        if self.batPart then
                            event:FireServer(self.batPart, rootPart)
                            event:FireServer({weapon = self.batPart, target = rootPart})
                        end
                    end)
                end
            end
        end
    end)
end

function Defense:checkForIntruders()
    if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then 
        return 
    end
    
    local myPos = LocalPlayer.Character.HumanoidRootPart.Position
    
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local theirPos = player.Character.HumanoidRootPart.Position
            local distance = (theirPos - myPos).Magnitude
            
            if distance <= self.range then
                local now = tick()
                if not self.cooldowns[player.UserId] or (now - self.cooldowns[player.UserId]) > 2 then
                    self.cooldowns[player.UserId] = now
                    print("‚ö†Ô∏è  INTRUDER DETECTED: " .. player.Name .. " (" .. math.floor(distance) .. " studs away)")
                    self:ragdollTarget(player)
                end
            end
        end
    end
end

-- Initialize system
print("üîß Setting up defense system...")

Defense.bat, Defense.batPart = Defense:findBat()
if Defense.bat and Defense.batPart then
    print("üî® Extending bat hitbox...")
    Defense.batPart.Size = Vector3.new(20, 20, 20)
    Defense.batPart.Transparency = 0.7
    Defense.batPart.CanCollide = false
    print("‚úì Bat hitbox extended to 20x20x20")
else
    print("‚ö†Ô∏è  No bat found - using direct ragdoll methods only")
end

print("üìè Protection range: " .. Defense.range .. " studs")
print("üîÑ Starting monitoring loop...")

-- Main monitoring loop
RunService.Heartbeat:Connect(function()
    if Defense.active then
        Defense:checkForIntruders()
    end
end)

print("=== üõ°Ô∏è  LOCKER ROOM PROTECTION ACTIVE ===")
print("‚úÖ System ready! Monitoring for intruders...")
print("üí° To toggle: Defense.active = false/true")
