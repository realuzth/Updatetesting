-- Locker Room Protection v1.0
-- Auto ragdoll trigger for locker room intruders
-- Created by uzth

repeat task.wait() until game:IsLoaded()

local Services = {
    Players = game:GetService("Players"),
    RunService = game:GetService("RunService"),
    ReplicatedStorage = game:GetService("ReplicatedStorage"),
    Workspace = game:GetService("Workspace"),
    CoreGui = game:GetService("CoreGui")
}

local LocalPlayer = Services.Players.LocalPlayer

-- Executor compatibility functions
local function getExecutorName()
    local executors = {
        "Synapse X", "Krnl", "Fluxus", "Oxygen U", "Script-Ware", 
        "JJSploit", "Sentinel", "ProtoSmasher", "Sirhurt", "Exploit"
    }
    
    for _, name in ipairs(executors) do
        if _G[name:gsub(" ", ""):gsub("-", ""):lower()] then
            return name
        end
    end
    
    -- Check for common executor globals
    if syn then return "Synapse X"
    elseif krnl then return "Krnl"
    elseif fluxus then return "Fluxus"
    elseif getgenv then return "Generic Executor"
    else return "Unknown Executor"
    end
end

-- Enhanced executor support
local function safeCall(func, ...)
    local success, result = pcall(func, ...)
    if not success then
        warn("[LockerRoom] Error: " .. tostring(result))
        return nil
    end
    return result
end

-- Ragdoll system references
local RagdollSystem = {
    baseballBat = nil,
    ragdollRigging = nil,
    playerRagdoll = nil,
    triggerEvent = nil,
    untriggerEvent = nil,
    meleeEvent = nil,
    ragdollScript = nil
}

function RagdollSystem:initialize()
    print("[LockerRoom] Initializing ragdoll system...")
    
    -- Get local player's baseball bat
    local playerWorkspace = Services.Workspace.Players:FindFirstChild(LocalPlayer.Name)
    if playerWorkspace then
        self.baseballBat = playerWorkspace:FindFirstChild("BaseballBat")
    end
    
    -- Get CoreGui ragdoll components
    local coreGui = Services.CoreGui
    if coreGui:FindFirstChild("RobloxGui") then
        local robloxGui = coreGui.RobloxGui
        
        if robloxGui:FindFirstChild("Modules") then
            local modules = robloxGui.Modules
            if modules:FindFirstChild("Common") then
                self.ragdollRigging = modules.Common:FindFirstChild("RagdollRigging")
            end
        end
        
        if robloxGui:FindFirstChild("CoreScripts/PlayerRagdoll") then
            self.playerRagdoll = robloxGui["CoreScripts/PlayerRagdoll"]
        end
    end
    
    -- Get ReplicatedStorage events
    local repStorage = Services.ReplicatedStorage
    if repStorage:FindFirstChild("Events") then
        local events = repStorage.Events
        self.triggerEvent = events:FindFirstChild("TriggerRagdoll")
        self.untriggerEvent = events:FindFirstChild("UntriggerRagdoll")
    end
    
    if repStorage:FindFirstChild("MeleeEvents") then
        self.meleeEvent = repStorage.MeleeEvents:FindFirstChild("Ragdolled")
    end
    
    -- Get StarterPlayer ragdoll script
    local starterPlayer = game:GetService("StarterPlayer")
    if starterPlayer:FindFirstChild("StarterPlayerScripts") then
        self.ragdollScript = starterPlayer.StarterPlayerScripts:FindFirstChild("RagdollScript")
    end
    
    print("[LockerRoom] Ragdoll system initialized")
    print("[LockerRoom] Baseball Bat: " .. (self.baseballBat and "Found" or "Not Found"))
    print("[LockerRoom] Trigger Event: " .. (self.triggerEvent and "Found" or "Not Found"))
end

function RagdollSystem:triggerRagdoll(targetPlayer)
    if not targetPlayer or not targetPlayer.Character then return end
    
    print("[LockerRoom] Triggering ragdoll for: " .. targetPlayer.Name)
    
    -- Method 1: Use ReplicatedStorage events
    if self.triggerEvent then
        safeCall(function()
            self.triggerEvent:FireServer(targetPlayer.Character)
        end)
    end
    
    -- Method 2: Use melee events
    if self.meleeEvent then
        safeCall(function()
            self.meleeEvent:FireServer(targetPlayer.Character)
        end)
    end
    
    -- Method 3: Direct character manipulation (if possible)
    safeCall(function()
        local humanoid = targetPlayer.Character:FindFirstChild("Humanoid")
        if humanoid then
            humanoid.PlatformStand = true
            humanoid:ChangeState(Enum.HumanoidStateType.Physics)
        end
    end)
end

-- Locker room detection system
local LockerRoomProtection = {
    enabled = true,
    detectedPlayers = {},
    lockerRoomParts = {},
    checkRadius = 50, -- Radius around player to check for locker room
    protectionRadius = 25 -- Radius to trigger ragdoll
}

function LockerRoomProtection:findLockerRoom()
    print("[LockerRoom] Scanning for locker room parts...")
    
    local lockerKeywords = {
        "locker", "Locker", "LOCKER",
        "room", "Room", "ROOM",
        "changing", "Changing", "CHANGING",
        "dressing", "Dressing", "DRESSING"
    }
    
    local function checkPart(part)
        if not part.Name then return false end
        
        for _, keyword in ipairs(lockerKeywords) do
            if string.find(part.Name, keyword) then
                return true
            end
        end
        return false
    end
    
    -- Search workspace for locker room parts
    local function searchFolder(folder)
        for _, child in ipairs(folder:GetChildren()) do
            if child:IsA("BasePart") and checkPart(child) then
                table.insert(self.lockerRoomParts, child)
                print("[LockerRoom] Found locker room part: " .. child.Name)
            elseif child:IsA("Folder") or child:IsA("Model") then
                searchFolder(child)
            end
        end
    end
    
    searchFolder(Services.Workspace)
    
    print("[LockerRoom] Found " .. #self.lockerRoomParts .. " locker room parts")
end

function LockerRoomProtection:isPlayerInLockerRoom(player)
    if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
        return false
    end
    
    local playerPosition = player.Character.HumanoidRootPart.Position
    local localPlayerPosition = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    
    if not localPlayerPosition then return false end
    localPlayerPosition = localPlayerPosition.Position
    
    -- Check if player is near local player (basic locker room detection)
    local distance = (playerPosition - localPlayerPosition).Magnitude
    
    -- If no specific locker room parts found, use proximity to local player
    if #self.lockerRoomParts == 0 then
        return distance <= self.protectionRadius
    end
    
    -- Check proximity to locker room parts
    for _, part in ipairs(self.lockerRoomParts) do
        if part and part.Parent then
            local partDistance = (playerPosition - part.Position).Magnitude
            if partDistance <= self.protectionRadius then
                return true
            end
        end
    end
    
    return false
end

function LockerRoomProtection:checkPlayers()
    if not self.enabled then return end
    
    for _, player in ipairs(Services.Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            local isInLockerRoom = self:isPlayerInLockerRoom(player)
            local wasDetected = self.detectedPlayers[player.UserId]
            
            if isInLockerRoom and not wasDetected then
                -- Player entered locker room
                self.detectedPlayers[player.UserId] = true
                print("[LockerRoom] INTRUDER DETECTED: " .. player.Name .. " entered locker room!")
                
                -- Trigger ragdoll
                RagdollSystem:triggerRagdoll(player)
                
            elseif not isInLockerRoom and wasDetected then
                -- Player left locker room
                self.detectedPlayers[player.UserId] = nil
                print("[LockerRoom] " .. player.Name .. " left locker room area")
            end
        end
    end
end

function LockerRoomProtection:toggle()
    self.enabled = not self.enabled
    print("[LockerRoom] Protection " .. (self.enabled and "ENABLED" or "DISABLED"))
    return self.enabled
end

-- Initialize systems
local function initialize()
    print("[LockerRoom] Starting Locker Room Protection System...")
    print("[LockerRoom] Executor: " .. getExecutorName())
    print("[LockerRoom] Player: " .. LocalPlayer.Name)
    
    -- Initialize ragdoll system
    RagdollSystem:initialize()
    
    -- Find locker room
    LockerRoomProtection:findLockerRoom()
    
    -- Start monitoring
    print("[LockerRoom] Starting player monitoring...")
    print("[LockerRoom] Protection radius: " .. LockerRoomProtection.protectionRadius .. " studs")
    
    -- Main monitoring loop
    Services.RunService.Heartbeat:Connect(function()
        LockerRoomProtection:checkPlayers()
    end)
    
    -- Handle player leaving
    Services.Players.PlayerRemoving:Connect(function(player)
        LockerRoomProtection.detectedPlayers[player.UserId] = nil
    end)
    
    print("[LockerRoom] Locker Room Protection System initialized!")
    print("[LockerRoom] Type 'LockerRoomProtection:toggle()' in console to enable/disable")
end

-- Start the system
task.wait(2)
initialize()
